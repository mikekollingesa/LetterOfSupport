function GetUser(executionContext) {
    // Get the form context from executionContext
    var formContext = executionContext.getFormContext();

    // Ensure the form is fully loaded before retrieving the Entity ID
    var entityId = formContext.data.entity.getId();

    console.log("Entity ID: " + entityId); // Log the Entity ID for debugging

    if (!entityId) {
        console.log("Entity ID is missing! Cannot proceed with the update.");
        return; // Exit if Entity ID is missing
    }

    var globalContext = Xrm.Utility.getGlobalContext();
    var userId = globalContext.userSettings.userId.replace("{", "").replace("}", "");
    var businessUnitId = null;
    var businessUnitName = "";

    // Get User's Business Unit and User Type in a single flow
    console.log("Starting User Retrieval...");
    Xrm.WebApi.retrieveRecord("systemuser", userId, "?$select=_businessunitid_value,esamk_usertype").then(
        function(result) {
            console.log("User retrieved: ", result);

            // Get Business Unit ID and User Type
            businessUnitId = result["_businessunitid_value"];
            var userType = result["esamk_usertype"];

            // Log userType to ensure we get the correct value for Delegate User
            console.log("User Type: ", userType);

            if (!businessUnitId) {
                console.log("Business Unit ID is empty. Cannot proceed with the lookup.");
                return; // Exit if no business unit found
            }

            // Retrieve Business Unit Name
            Xrm.WebApi.retrieveRecord("businessunit", businessUnitId, "?$select=name").then(
                function(buResult) {
                    businessUnitName = buResult["name"];
                    console.log("Business Unit Name: " + businessUnitName);

                    // Proceed with logic after Business Unit Name retrieval
                    processUserType(userType, businessUnitId, businessUnitName, entityId);
                },
                function(error) {
                    console.log("Error retrieving Business Unit Name: " + error.message);
                }
            );
        },
        function(error) {
            console.log("Error retrieving User details: " + error.message);
        }
    );
}

function processUserType(userType, businessUnitId, businessUnitName, entityId) {
    console.log("Processing User Type: " + userType);  // Log this to ensure the function is called

    if (userType == 305290000) {  // ESA Type
        console.log("Setting to ESA");

        // Set Owner and Owning Business Unit for esamk_letterofsupport1 entity
        setOwnerForRecord(entityId, businessUnitId);

    } else if (userType == 305290001) {  // Delegate Type
        console.log("Setting to Delegate");

        // Use Business Unit Name to fetch MemberState
        var fetchXml = "?$select=esamk_memberstateid,esamk_countryname&$filter=esamk_countryname eq '" + businessUnitName + "'";

        console.log("FetchXml: " + fetchXml);

        Xrm.WebApi.retrieveMultipleRecords("esamk_memberstate", fetchXml).then(
            function(memberStateResult) {
                console.log("MemberState fetch result: ", memberStateResult);
                
                if (memberStateResult.entities.length > 0) {
                    var esamk_memberstateid = memberStateResult.entities[0]["esamk_memberstateid"];
                    console.log("Found MemberState: " + memberStateResult.entities[0]["esamk_countryname"] + " ID: " + esamk_memberstateid);
                    Xrm.Page.getAttribute("esamk_memberstate").setValue(esamk_memberstateid);

                    // Now, log the update attempt
                    console.log("Attempting to set Owner for Delegate User...");

                    // Set Owner for esamk_letterofsupport1 entity
                    setOwnerForRecord(entityId, businessUnitId);
                } else {
                    console.log("No MemberState found with name: " + businessUnitName);
                }
            },
            function(error) {
                console.log("Error retrieving MemberState: " + error.message);
            }
        );
    } else {
        console.log("Unknown User Type.");
    }
}

function setOwnerForRecord(entityId, businessUnitId) {
    var ownerReference = {
        id: Xrm.Utility.getGlobalContext().userSettings.userId, // Current logged-in user
        entityType: "systemuser" // Setting the owner to the current user
    };

    console.log("Setting Owner for Entity ID: " + entityId + " with owner ID: " + ownerReference.id);

    // Explicitly set both Owner and Owning Business Unit fields for the record
    Xrm.WebApi.updateRecord("esamk_letterofsupport1", entityId, {
        "ownerid": ownerReference, // Set the Owner
        "businessunitid": { // Explicitly set the Owning Business Unit
            "id": businessUnitId,
            "entityType": "businessunit"
        }
    }).then(
        function() {
            console.log("Owner and Owning Business Unit successfully set.");

            // Save the record after setting the Owner and Owning Business Unit
            Xrm.Page.data.entity.save().then(
                function() {
                    console.log("Record saved successfully.");

                    // Refresh the form to ensure changes are visible
                    Xrm.Page.data.refresh(true).then(
                        function() {
                            console.log("Form refreshed successfully.");
                        },
                        function(error) {
                            console.log("Error refreshing the form: " + error.message);
                        }
                    );
                },
                function(error) {
                    console.log("Error saving the record: " + error.message);
                }
            );
        },
        function(error) {
            console.log("Error setting Owner or Owning Business Unit: " + error.message);
        }
    );
}






function SetDefaultOwnerOnLoad(executionContext) {
    var formContext = executionContext.getFormContext();
    var globalContext = Xrm.Utility.getGlobalContext();
    var userId = globalContext.userSettings.userId;
    
    console.log("üîπ Setting Default Owner on Form Load...");

    // Check if record is new (no ID yet)
    if (!formContext.data.entity.getId()) {
        console.log("üÜï New record detected. Setting temporary Owner...");
        
        // Set Owner field to Current User
        var ownerReference = [{
            id: userId,
            entityType: "systemuser"
        }];
        formContext.getAttribute("ownerid").setValue(ownerReference);

        console.log("‚úÖ Temporary Owner Set: " + userId);
    } else {
        console.log("üìù Record already saved. No need to set Owner.");
    }
}
