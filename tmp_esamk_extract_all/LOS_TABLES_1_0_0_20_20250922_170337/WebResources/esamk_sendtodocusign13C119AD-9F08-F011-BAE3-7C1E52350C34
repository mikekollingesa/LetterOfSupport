function updateAndNotify(primaryControl) {
    console.log("üü¢ Function 'updateAndNotify' triggered");

    try {
        if (!primaryControl) {
            console.error("‚ùå No primaryControl passed to function");
            alert("Primary Control not available. Please check Ribbon setup.");
            return;
        }

        const entityId = primaryControl.data?.entity?.getId()?.replace(/[{}]/g, "");
        const entityName = primaryControl.data?.entity?.getEntityName();
        console.log("üìÑ Entity Name:", entityName);
        console.log("üÜî Entity ID:", entityId);

        if (!entityId || !entityName) {
            throw new Error("Could not retrieve entity info. Ensure the record is saved.");
        }

        const fundingAmount = primaryControl.getAttribute("esamk_authorisedfunding")?.getValue();
        const respondByDate = primaryControl.getAttribute("esamk_dateallsignaturesrequiredby")?.getValue();

        console.log("üí∞ Funding Amount:", fundingAmount); // Make sure this logs
        console.log("üìÖ Respond By Date:", respondByDate); // Make sure this logs

        if (fundingAmount === 0) {
            alert("Funding amount cannot be zero");
            return;
        }

        if (!respondByDate) {
            alert("Respond by date is required");
            return;
        }

        const updateData = {
            esamk_submit: "SendNow"
        };

        console.log("üì¶ Update Payload:", updateData); // Make sure this logs
        disableRibbonButton(primaryControl);

        Xrm.WebApi.updateRecord(entityName, entityId, updateData).then(
            function success(result) {
                console.log("‚úÖ Record updated successfully:", result);
                alert("Submit In Progress");
                setTimeout(() => {
                    console.log("üîÑ Refreshing form...");
                    primaryControl.data.refresh();
                }, 1000);
            },
            function (error) {
                console.error("‚ùå Web API error:", error.message);
                alert("Error: " + error.message);
            }
        );
    } catch (error) {
        console.error("‚ùó Try/Catch Error:", error.message);
        alert("Error: " + error.message);
    }
}


function isNotSubmitted(primaryControl) {
    try {
        console.log("üö¶ Enable Rule: isNotSubmitted triggered");

        if (!primaryControl) {
            console.warn("‚ö†Ô∏è primaryControl not provided");
            return true; // Fail-safe: keep button enabled
        }

        const submitAttr = primaryControl.getAttribute("esamk_submit");
        if (!submitAttr) {
            console.log("‚ÑπÔ∏è Field 'esamk_submit' not found on form. Assuming not submitted.");
            return true;
        }

        const submitValue = submitAttr.getValue();
        console.log("üìÑ esamk_submit value:", submitValue);

        // Check if esamk_authorisedfunding is numeric
        const fundingAttr = primaryControl.getAttribute("esamk_authorisedfunding");
        if (!fundingAttr) {
            console.warn("‚ö†Ô∏è Field 'esamk_authorisedfunding' not found on form.");
            return false; // Disable button: funding field missing
        }

        const fundingValue = fundingAttr.getValue();
        console.log("üìÑ esamk_authorisedfunding value:", fundingValue);

        // Check if fundingValue is numeric
        const isFundingNumeric = !isNaN(fundingValue) && fundingValue !== null && fundingValue !== "";

        if (!isFundingNumeric) {
            console.log("‚ùå 'esamk_authorisedfunding' value is not numeric.");
            return false; // Disable button: funding invalid
        }

        // Disable button if submitValue is one of these (already submitted)
        if (submitValue === "SendToSpecifier" || submitValue === "Sent" || submitValue === "SentToSpecifier" || submitValue === "SendNow") {
            return false; // Disable button
        }

        return true; // Enable button
    } catch (e) {
        console.error("‚ùå Enable Rule Error:", e.message);
        return true; // Fail-safe: keep button enabled
    }
}


